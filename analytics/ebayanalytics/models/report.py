# coding: utf-8

"""
     Seller Service Metrics API 

    The Analytics API provides data and information about a seller and their eBay business. The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating. The three resources in the Analytics API provide the following data and information: Customer Service Metric &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group. Traffic Report &ndash; Returns data that shows how buyers are engaging with a seller's listings. Seller Standards Profile &ndash; Returns data pertaining to a seller's performance rating. Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers. For details on using this API, see Analyzing seller performance.

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Report(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dimension_metadata=None, end_date=None, header=None, last_updated_date=None, records=None, start_date=None, warnings=None):
        """
        Report - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dimension_metadata': 'list[Metadata]',
            'end_date': 'str',
            'header': 'Header',
            'last_updated_date': 'str',
            'records': 'list[Record]',
            'start_date': 'str',
            'warnings': 'list[Error]'
        }

        self.attribute_map = {
            'dimension_metadata': 'dimensionMetadata',
            'end_date': 'endDate',
            'header': 'header',
            'last_updated_date': 'lastUpdatedDate',
            'records': 'records',
            'start_date': 'startDate',
            'warnings': 'warnings'
        }

        self._dimension_metadata = dimension_metadata
        self._end_date = end_date
        self._header = header
        self._last_updated_date = last_updated_date
        self._records = records
        self._start_date = start_date
        self._warnings = warnings

    @property
    def dimension_metadata(self):
        """
        Gets the dimension_metadata of this Report.
        A complex type containing the header of the report and the type of data containted in the rows of the report.

        :return: The dimension_metadata of this Report.
        :rtype: list[Metadata]
        """
        return self._dimension_metadata

    @dimension_metadata.setter
    def dimension_metadata(self, dimension_metadata):
        """
        Sets the dimension_metadata of this Report.
        A complex type containing the header of the report and the type of data containted in the rows of the report.

        :param dimension_metadata: The dimension_metadata of this Report.
        :type: list[Metadata]
        """

        self._dimension_metadata = dimension_metadata

    @property
    def end_date(self):
        """
        Gets the end_date of this Report.
        The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :return: The end_date of this Report.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this Report.
        The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :param end_date: The end_date of this Report.
        :type: str
        """

        self._end_date = end_date

    @property
    def header(self):
        """
        Gets the header of this Report.


        :return: The header of this Report.
        :rtype: Header
        """
        return self._header

    @header.setter
    def header(self, header):
        """
        Sets the header of this Report.


        :param header: The header of this Report.
        :type: Header
        """

        self._header = header

    @property
    def last_updated_date(self):
        """
        Gets the last_updated_date of this Report.
        The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.

        :return: The last_updated_date of this Report.
        :rtype: str
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """
        Sets the last_updated_date of this Report.
        The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.

        :param last_updated_date: The last_updated_date of this Report.
        :type: str
        """

        self._last_updated_date = last_updated_date

    @property
    def records(self):
        """
        Gets the records of this Report.
        A complex type containing the individual data records for the traffic report.

        :return: The records of this Report.
        :rtype: list[Record]
        """
        return self._records

    @records.setter
    def records(self, records):
        """
        Sets the records of this Report.
        A complex type containing the individual data records for the traffic report.

        :param records: The records of this Report.
        :type: list[Record]
        """

        self._records = records

    @property
    def start_date(self):
        """
        Gets the start_date of this Report.
        The start date of the date range used to calculate the report, in ISO 8601 format.

        :return: The start_date of this Report.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Report.
        The start date of the date range used to calculate the report, in ISO 8601 format.

        :param start_date: The start_date of this Report.
        :type: str
        """

        self._start_date = start_date

    @property
    def warnings(self):
        """
        Gets the warnings of this Report.
        An array of any process errors or warnings that were generated during the processing of the call processing.

        :return: The warnings of this Report.
        :rtype: list[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """
        Sets the warnings of this Report.
        An array of any process errors or warnings that were generated during the processing of the call processing.

        :param warnings: The warnings of this Report.
        :type: list[Error]
        """

        self._warnings = warnings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
