from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.automotive_parts_compatibility_policy import AutomotivePartsCompatibilityPolicy
    from ..models.error import Error


T = TypeVar("T", bound="AutomotivePartsCompatibilityPolicyResponse")


@_attrs_define
class AutomotivePartsCompatibilityPolicyResponse:
    """
    Attributes:
        automotive_parts_compatibility_policies (Union[Unset, List['AutomotivePartsCompatibilityPolicy']]): A list of
            category IDs and the automotive-parts-compatibility policies for each of the listed categories.
        warnings (Union[Unset, List['Error']]): A list of the warnings that were generated as a result of the request.
            This field is not returned if no warnings were generated by the request.
    """

    automotive_parts_compatibility_policies: Union[Unset, List["AutomotivePartsCompatibilityPolicy"]] = UNSET
    warnings: Union[Unset, List["Error"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        automotive_parts_compatibility_policies: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.automotive_parts_compatibility_policies, Unset):
            automotive_parts_compatibility_policies = []
            for automotive_parts_compatibility_policies_item_data in self.automotive_parts_compatibility_policies:
                automotive_parts_compatibility_policies_item = (
                    automotive_parts_compatibility_policies_item_data.to_dict()
                )
                automotive_parts_compatibility_policies.append(automotive_parts_compatibility_policies_item)

        warnings: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.warnings, Unset):
            warnings = []
            for warnings_item_data in self.warnings:
                warnings_item = warnings_item_data.to_dict()
                warnings.append(warnings_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if automotive_parts_compatibility_policies is not UNSET:
            field_dict["automotivePartsCompatibilityPolicies"] = automotive_parts_compatibility_policies
        if warnings is not UNSET:
            field_dict["warnings"] = warnings

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.automotive_parts_compatibility_policy import AutomotivePartsCompatibilityPolicy
        from ..models.error import Error

        d = src_dict.copy()
        automotive_parts_compatibility_policies = []
        _automotive_parts_compatibility_policies = d.pop("automotivePartsCompatibilityPolicies", UNSET)
        for automotive_parts_compatibility_policies_item_data in _automotive_parts_compatibility_policies or []:
            automotive_parts_compatibility_policies_item = AutomotivePartsCompatibilityPolicy.from_dict(
                automotive_parts_compatibility_policies_item_data
            )

            automotive_parts_compatibility_policies.append(automotive_parts_compatibility_policies_item)

        warnings = []
        _warnings = d.pop("warnings", UNSET)
        for warnings_item_data in _warnings or []:
            warnings_item = Error.from_dict(warnings_item_data)

            warnings.append(warnings_item)

        automotive_parts_compatibility_policy_response = cls(
            automotive_parts_compatibility_policies=automotive_parts_compatibility_policies,
            warnings=warnings,
        )

        automotive_parts_compatibility_policy_response.additional_properties = d
        return automotive_parts_compatibility_policy_response

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
