# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AncestorReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, category_id=None, category_name=None, category_subtree_node_href=None, category_tree_node_level=None):
        """
        AncestorReference - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category_id': 'str',
            'category_name': 'str',
            'category_subtree_node_href': 'str',
            'category_tree_node_level': 'int'
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_name': 'categoryName',
            'category_subtree_node_href': 'categorySubtreeNodeHref',
            'category_tree_node_level': 'categoryTreeNodeLevel'
        }

        self._category_id = category_id
        self._category_name = category_name
        self._category_subtree_node_href = category_subtree_node_href
        self._category_tree_node_level = category_tree_node_level

    @property
    def category_id(self):
        """
        Gets the category_id of this AncestorReference.
        The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.

        :return: The category_id of this AncestorReference.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this AncestorReference.
        The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.

        :param category_id: The category_id of this AncestorReference.
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """
        Gets the category_name of this AncestorReference.
        The name of the ancestor category identified by categoryId.

        :return: The category_name of this AncestorReference.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """
        Sets the category_name of this AncestorReference.
        The name of the ancestor category identified by categoryId.

        :param category_name: The category_name of this AncestorReference.
        :type: str
        """

        self._category_name = category_name

    @property
    def category_subtree_node_href(self):
        """
        Gets the category_subtree_node_href of this AncestorReference.
        The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.

        :return: The category_subtree_node_href of this AncestorReference.
        :rtype: str
        """
        return self._category_subtree_node_href

    @category_subtree_node_href.setter
    def category_subtree_node_href(self, category_subtree_node_href):
        """
        Sets the category_subtree_node_href of this AncestorReference.
        The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.

        :param category_subtree_node_href: The category_subtree_node_href of this AncestorReference.
        :type: str
        """

        self._category_subtree_node_href = category_subtree_node_href

    @property
    def category_tree_node_level(self):
        """
        Gets the category_tree_node_level of this AncestorReference.
        The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :return: The category_tree_node_level of this AncestorReference.
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """
        Sets the category_tree_node_level of this AncestorReference.
        The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :param category_tree_node_level: The category_tree_node_level of this AncestorReference.
        :type: int
        """

        self._category_tree_node_level = category_tree_node_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
