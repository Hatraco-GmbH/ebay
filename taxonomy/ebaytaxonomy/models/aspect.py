# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Aspect(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aspect_constraint=None, aspect_values=None, localized_aspect_name=None, relevance_indicator=None):
        """
        Aspect - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aspect_constraint': 'AspectConstraint',
            'aspect_values': 'list[AspectValue]',
            'localized_aspect_name': 'str',
            'relevance_indicator': 'RelevanceIndicator'
        }

        self.attribute_map = {
            'aspect_constraint': 'aspectConstraint',
            'aspect_values': 'aspectValues',
            'localized_aspect_name': 'localizedAspectName',
            'relevance_indicator': 'relevanceIndicator'
        }

        self._aspect_constraint = aspect_constraint
        self._aspect_values = aspect_values
        self._localized_aspect_name = localized_aspect_name
        self._relevance_indicator = relevance_indicator

    @property
    def aspect_constraint(self):
        """
        Gets the aspect_constraint of this Aspect.


        :return: The aspect_constraint of this Aspect.
        :rtype: AspectConstraint
        """
        return self._aspect_constraint

    @aspect_constraint.setter
    def aspect_constraint(self, aspect_constraint):
        """
        Sets the aspect_constraint of this Aspect.


        :param aspect_constraint: The aspect_constraint of this Aspect.
        :type: AspectConstraint
        """

        self._aspect_constraint = aspect_constraint

    @property
    def aspect_values(self):
        """
        Gets the aspect_values of this Aspect.
        A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.

        :return: The aspect_values of this Aspect.
        :rtype: list[AspectValue]
        """
        return self._aspect_values

    @aspect_values.setter
    def aspect_values(self, aspect_values):
        """
        Sets the aspect_values of this Aspect.
        A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.

        :param aspect_values: The aspect_values of this Aspect.
        :type: list[AspectValue]
        """

        self._aspect_values = aspect_values

    @property
    def localized_aspect_name(self):
        """
        Gets the localized_aspect_name of this Aspect.
        The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.

        :return: The localized_aspect_name of this Aspect.
        :rtype: str
        """
        return self._localized_aspect_name

    @localized_aspect_name.setter
    def localized_aspect_name(self, localized_aspect_name):
        """
        Sets the localized_aspect_name of this Aspect.
        The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.

        :param localized_aspect_name: The localized_aspect_name of this Aspect.
        :type: str
        """

        self._localized_aspect_name = localized_aspect_name

    @property
    def relevance_indicator(self):
        """
        Gets the relevance_indicator of this Aspect.


        :return: The relevance_indicator of this Aspect.
        :rtype: RelevanceIndicator
        """
        return self._relevance_indicator

    @relevance_indicator.setter
    def relevance_indicator(self, relevance_indicator):
        """
        Sets the relevance_indicator of this Aspect.


        :param relevance_indicator: The relevance_indicator of this Aspect.
        :type: RelevanceIndicator
        """

        self._relevance_indicator = relevance_indicator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
