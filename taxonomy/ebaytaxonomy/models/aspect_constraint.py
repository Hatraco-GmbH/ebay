# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AspectConstraint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aspect_applicable_to=None, aspect_data_type=None, aspect_enabled_for_variations=None, aspect_format=None, aspect_max_length=None, aspect_mode=None, aspect_required=None, aspect_usage=None, expected_required_by_date=None, item_to_aspect_cardinality=None):
        """
        AspectConstraint - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aspect_applicable_to': 'list[str]',
            'aspect_data_type': 'str',
            'aspect_enabled_for_variations': 'bool',
            'aspect_format': 'str',
            'aspect_max_length': 'int',
            'aspect_mode': 'str',
            'aspect_required': 'bool',
            'aspect_usage': 'str',
            'expected_required_by_date': 'str',
            'item_to_aspect_cardinality': 'str'
        }

        self.attribute_map = {
            'aspect_applicable_to': 'aspectApplicableTo',
            'aspect_data_type': 'aspectDataType',
            'aspect_enabled_for_variations': 'aspectEnabledForVariations',
            'aspect_format': 'aspectFormat',
            'aspect_max_length': 'aspectMaxLength',
            'aspect_mode': 'aspectMode',
            'aspect_required': 'aspectRequired',
            'aspect_usage': 'aspectUsage',
            'expected_required_by_date': 'expectedRequiredByDate',
            'item_to_aspect_cardinality': 'itemToAspectCardinality'
        }

        self._aspect_applicable_to = aspect_applicable_to
        self._aspect_data_type = aspect_data_type
        self._aspect_enabled_for_variations = aspect_enabled_for_variations
        self._aspect_format = aspect_format
        self._aspect_max_length = aspect_max_length
        self._aspect_mode = aspect_mode
        self._aspect_required = aspect_required
        self._aspect_usage = aspect_usage
        self._expected_required_by_date = expected_required_by_date
        self._item_to_aspect_cardinality = item_to_aspect_cardinality

    @property
    def aspect_applicable_to(self):
        """
        Gets the aspect_applicable_to of this AspectConstraint.
        This value indicate if the aspect identified by the aspects.localizedAspectName field is a product aspect (relevant to catalog products in the category) or an item/instance aspect, which is an aspect whose value will vary based on a particular instance of the product.

        :return: The aspect_applicable_to of this AspectConstraint.
        :rtype: list[str]
        """
        return self._aspect_applicable_to

    @aspect_applicable_to.setter
    def aspect_applicable_to(self, aspect_applicable_to):
        """
        Sets the aspect_applicable_to of this AspectConstraint.
        This value indicate if the aspect identified by the aspects.localizedAspectName field is a product aspect (relevant to catalog products in the category) or an item/instance aspect, which is an aspect whose value will vary based on a particular instance of the product.

        :param aspect_applicable_to: The aspect_applicable_to of this AspectConstraint.
        :type: list[str]
        """

        self._aspect_applicable_to = aspect_applicable_to

    @property
    def aspect_data_type(self):
        """
        Gets the aspect_data_type of this AspectConstraint.
        The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectDataTypeEnum'>eBay API documentation</a>

        :return: The aspect_data_type of this AspectConstraint.
        :rtype: str
        """
        return self._aspect_data_type

    @aspect_data_type.setter
    def aspect_data_type(self, aspect_data_type):
        """
        Sets the aspect_data_type of this AspectConstraint.
        The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectDataTypeEnum'>eBay API documentation</a>

        :param aspect_data_type: The aspect_data_type of this AspectConstraint.
        :type: str
        """

        self._aspect_data_type = aspect_data_type

    @property
    def aspect_enabled_for_variations(self):
        """
        Gets the aspect_enabled_for_variations of this AspectConstraint.
        A value of true indicates that this aspect can be used to help identify item variations.

        :return: The aspect_enabled_for_variations of this AspectConstraint.
        :rtype: bool
        """
        return self._aspect_enabled_for_variations

    @aspect_enabled_for_variations.setter
    def aspect_enabled_for_variations(self, aspect_enabled_for_variations):
        """
        Sets the aspect_enabled_for_variations of this AspectConstraint.
        A value of true indicates that this aspect can be used to help identify item variations.

        :param aspect_enabled_for_variations: The aspect_enabled_for_variations of this AspectConstraint.
        :type: bool
        """

        self._aspect_enabled_for_variations = aspect_enabled_for_variations

    @property
    def aspect_format(self):
        """
        Gets the aspect_format of this AspectConstraint.
        Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double

        :return: The aspect_format of this AspectConstraint.
        :rtype: str
        """
        return self._aspect_format

    @aspect_format.setter
    def aspect_format(self, aspect_format):
        """
        Sets the aspect_format of this AspectConstraint.
        Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double

        :param aspect_format: The aspect_format of this AspectConstraint.
        :type: str
        """

        self._aspect_format = aspect_format

    @property
    def aspect_max_length(self):
        """
        Gets the aspect_max_length of this AspectConstraint.
        The maximum length of the item/instance aspect's value. The seller must make sure not to exceed this length when specifying the instance aspect's value for a product. This field is only returned for instance aspects.

        :return: The aspect_max_length of this AspectConstraint.
        :rtype: int
        """
        return self._aspect_max_length

    @aspect_max_length.setter
    def aspect_max_length(self, aspect_max_length):
        """
        Sets the aspect_max_length of this AspectConstraint.
        The maximum length of the item/instance aspect's value. The seller must make sure not to exceed this length when specifying the instance aspect's value for a product. This field is only returned for instance aspects.

        :param aspect_max_length: The aspect_max_length of this AspectConstraint.
        :type: int
        """

        self._aspect_max_length = aspect_max_length

    @property
    def aspect_mode(self):
        """
        Gets the aspect_mode of this AspectConstraint.
        The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectModeEnum'>eBay API documentation</a>

        :return: The aspect_mode of this AspectConstraint.
        :rtype: str
        """
        return self._aspect_mode

    @aspect_mode.setter
    def aspect_mode(self, aspect_mode):
        """
        Sets the aspect_mode of this AspectConstraint.
        The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectModeEnum'>eBay API documentation</a>

        :param aspect_mode: The aspect_mode of this AspectConstraint.
        :type: str
        """

        self._aspect_mode = aspect_mode

    @property
    def aspect_required(self):
        """
        Gets the aspect_required of this AspectConstraint.
        A value of true indicates that this aspect is required when offering items in the specified category.

        :return: The aspect_required of this AspectConstraint.
        :rtype: bool
        """
        return self._aspect_required

    @aspect_required.setter
    def aspect_required(self, aspect_required):
        """
        Sets the aspect_required of this AspectConstraint.
        A value of true indicates that this aspect is required when offering items in the specified category.

        :param aspect_required: The aspect_required of this AspectConstraint.
        :type: bool
        """

        self._aspect_required = aspect_required

    @property
    def aspect_usage(self):
        """
        Gets the aspect_usage of this AspectConstraint.
        The enumeration value returned in this field will indicate if the corresponding aspect is recommended or optional. Note: This field is always returned, even for hard-mandated/required aspects (where aspectRequired: true). The value returned for required aspects will be RECOMMENDED, but they are actually required and a seller will be blocked from listing or revising an item without these aspects. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectUsageEnum'>eBay API documentation</a>

        :return: The aspect_usage of this AspectConstraint.
        :rtype: str
        """
        return self._aspect_usage

    @aspect_usage.setter
    def aspect_usage(self, aspect_usage):
        """
        Sets the aspect_usage of this AspectConstraint.
        The enumeration value returned in this field will indicate if the corresponding aspect is recommended or optional. Note: This field is always returned, even for hard-mandated/required aspects (where aspectRequired: true). The value returned for required aspects will be RECOMMENDED, but they are actually required and a seller will be blocked from listing or revising an item without these aspects. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectUsageEnum'>eBay API documentation</a>

        :param aspect_usage: The aspect_usage of this AspectConstraint.
        :type: str
        """

        self._aspect_usage = aspect_usage

    @property
    def expected_required_by_date(self):
        """
        Gets the expected_required_by_date of this AspectConstraint.
        The expected date after which the aspect will be required. Note: The value returned in this field specifies only an approximate date, which may not reflect the actual date after which the aspect is required.

        :return: The expected_required_by_date of this AspectConstraint.
        :rtype: str
        """
        return self._expected_required_by_date

    @expected_required_by_date.setter
    def expected_required_by_date(self, expected_required_by_date):
        """
        Sets the expected_required_by_date of this AspectConstraint.
        The expected date after which the aspect will be required. Note: The value returned in this field specifies only an approximate date, which may not reflect the actual date after which the aspect is required.

        :param expected_required_by_date: The expected_required_by_date of this AspectConstraint.
        :type: str
        """

        self._expected_required_by_date = expected_required_by_date

    @property
    def item_to_aspect_cardinality(self):
        """
        Gets the item_to_aspect_cardinality of this AspectConstraint.
        Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ItemToAspectCardinalityEnum'>eBay API documentation</a>

        :return: The item_to_aspect_cardinality of this AspectConstraint.
        :rtype: str
        """
        return self._item_to_aspect_cardinality

    @item_to_aspect_cardinality.setter
    def item_to_aspect_cardinality(self, item_to_aspect_cardinality):
        """
        Sets the item_to_aspect_cardinality of this AspectConstraint.
        Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ItemToAspectCardinalityEnum'>eBay API documentation</a>

        :param item_to_aspect_cardinality: The item_to_aspect_cardinality of this AspectConstraint.
        :type: str
        """

        self._item_to_aspect_cardinality = item_to_aspect_cardinality

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
