# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CategoryTree(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, applicable_marketplace_ids=None, category_tree_id=None, category_tree_version=None, root_category_node=None):
        """
        CategoryTree - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'applicable_marketplace_ids': 'list[str]',
            'category_tree_id': 'str',
            'category_tree_version': 'str',
            'root_category_node': 'CategoryTreeNode'
        }

        self.attribute_map = {
            'applicable_marketplace_ids': 'applicableMarketplaceIds',
            'category_tree_id': 'categoryTreeId',
            'category_tree_version': 'categoryTreeVersion',
            'root_category_node': 'rootCategoryNode'
        }

        self._applicable_marketplace_ids = applicable_marketplace_ids
        self._category_tree_id = category_tree_id
        self._category_tree_version = category_tree_version
        self._root_category_node = root_category_node

    @property
    def applicable_marketplace_ids(self):
        """
        Gets the applicable_marketplace_ids of this CategoryTree.
        A list of one or more identifiers of the eBay marketplaces that use this category tree.

        :return: The applicable_marketplace_ids of this CategoryTree.
        :rtype: list[str]
        """
        return self._applicable_marketplace_ids

    @applicable_marketplace_ids.setter
    def applicable_marketplace_ids(self, applicable_marketplace_ids):
        """
        Sets the applicable_marketplace_ids of this CategoryTree.
        A list of one or more identifiers of the eBay marketplaces that use this category tree.

        :param applicable_marketplace_ids: The applicable_marketplace_ids of this CategoryTree.
        :type: list[str]
        """

        self._applicable_marketplace_ids = applicable_marketplace_ids

    @property
    def category_tree_id(self):
        """
        Gets the category_tree_id of this CategoryTree.
        The unique identifier of this eBay category tree.

        :return: The category_tree_id of this CategoryTree.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """
        Sets the category_tree_id of this CategoryTree.
        The unique identifier of this eBay category tree.

        :param category_tree_id: The category_tree_id of this CategoryTree.
        :type: str
        """

        self._category_tree_id = category_tree_id

    @property
    def category_tree_version(self):
        """
        Gets the category_tree_version of this CategoryTree.
        The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.

        :return: The category_tree_version of this CategoryTree.
        :rtype: str
        """
        return self._category_tree_version

    @category_tree_version.setter
    def category_tree_version(self, category_tree_version):
        """
        Sets the category_tree_version of this CategoryTree.
        The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.

        :param category_tree_version: The category_tree_version of this CategoryTree.
        :type: str
        """

        self._category_tree_version = category_tree_version

    @property
    def root_category_node(self):
        """
        Gets the root_category_node of this CategoryTree.


        :return: The root_category_node of this CategoryTree.
        :rtype: CategoryTreeNode
        """
        return self._root_category_node

    @root_category_node.setter
    def root_category_node(self, root_category_node):
        """
        Sets the root_category_node of this CategoryTree.


        :param root_category_node: The root_category_node of this CategoryTree.
        :type: CategoryTreeNode
        """

        self._root_category_node = root_category_node

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
