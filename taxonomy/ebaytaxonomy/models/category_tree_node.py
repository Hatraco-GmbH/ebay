# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CategoryTreeNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, category=None, category_tree_node_level=None, child_category_tree_nodes=None, leaf_category_tree_node=None, parent_category_tree_node_href=None):
        """
        CategoryTreeNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category': 'Category',
            'category_tree_node_level': 'int',
            'child_category_tree_nodes': 'list[CategoryTreeNode]',
            'leaf_category_tree_node': 'bool',
            'parent_category_tree_node_href': 'str'
        }

        self.attribute_map = {
            'category': 'category',
            'category_tree_node_level': 'categoryTreeNodeLevel',
            'child_category_tree_nodes': 'childCategoryTreeNodes',
            'leaf_category_tree_node': 'leafCategoryTreeNode',
            'parent_category_tree_node_href': 'parentCategoryTreeNodeHref'
        }

        self._category = category
        self._category_tree_node_level = category_tree_node_level
        self._child_category_tree_nodes = child_category_tree_nodes
        self._leaf_category_tree_node = leaf_category_tree_node
        self._parent_category_tree_node_href = parent_category_tree_node_href

    @property
    def category(self):
        """
        Gets the category of this CategoryTreeNode.


        :return: The category of this CategoryTreeNode.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this CategoryTreeNode.


        :param category: The category of this CategoryTreeNode.
        :type: Category
        """

        self._category = category

    @property
    def category_tree_node_level(self):
        """
        Gets the category_tree_node_level of this CategoryTreeNode.
        The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :return: The category_tree_node_level of this CategoryTreeNode.
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """
        Sets the category_tree_node_level of this CategoryTreeNode.
        The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :param category_tree_node_level: The category_tree_node_level of this CategoryTreeNode.
        :type: int
        """

        self._category_tree_node_level = category_tree_node_level

    @property
    def child_category_tree_nodes(self):
        """
        Gets the child_category_tree_nodes of this CategoryTreeNode.
        An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).

        :return: The child_category_tree_nodes of this CategoryTreeNode.
        :rtype: list[CategoryTreeNode]
        """
        return self._child_category_tree_nodes

    @child_category_tree_nodes.setter
    def child_category_tree_nodes(self, child_category_tree_nodes):
        """
        Sets the child_category_tree_nodes of this CategoryTreeNode.
        An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).

        :param child_category_tree_nodes: The child_category_tree_nodes of this CategoryTreeNode.
        :type: list[CategoryTreeNode]
        """

        self._child_category_tree_nodes = child_category_tree_nodes

    @property
    def leaf_category_tree_node(self):
        """
        Gets the leaf_category_tree_node of this CategoryTreeNode.
        A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.

        :return: The leaf_category_tree_node of this CategoryTreeNode.
        :rtype: bool
        """
        return self._leaf_category_tree_node

    @leaf_category_tree_node.setter
    def leaf_category_tree_node(self, leaf_category_tree_node):
        """
        Sets the leaf_category_tree_node of this CategoryTreeNode.
        A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.

        :param leaf_category_tree_node: The leaf_category_tree_node of this CategoryTreeNode.
        :type: bool
        """

        self._leaf_category_tree_node = leaf_category_tree_node

    @property
    def parent_category_tree_node_href(self):
        """
        Gets the parent_category_tree_node_href of this CategoryTreeNode.
        The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.

        :return: The parent_category_tree_node_href of this CategoryTreeNode.
        :rtype: str
        """
        return self._parent_category_tree_node_href

    @parent_category_tree_node_href.setter
    def parent_category_tree_node_href(self, parent_category_tree_node_href):
        """
        Sets the parent_category_tree_node_href of this CategoryTreeNode.
        The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.

        :param parent_category_tree_node_href: The parent_category_tree_node_href of this CategoryTreeNode.
        :type: str
        """

        self._parent_category_tree_node_href = parent_category_tree_node_href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
